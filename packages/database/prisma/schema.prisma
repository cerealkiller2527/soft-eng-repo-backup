// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Example table used in the express router example
enum Status {
  NOTASSIGNED
  ASSIGNED
  INPROGRESS
  COMPLETED
}

enum RequestType {
  AUDIOVISUAL
  EXTERNALTRANSPORTATION
  EQUIPMENTDELIVERY
  LANGUAGE
  SECURITY
}

enum Priority {
  URGENT
  HIGH
  INTERMEDIATE
  LOW
}

model Employee {
  id             Int              @id @default(autoincrement())
  name           String
  employeeType   String
  canService     RequestType[]
  language       String[]
  ServiceRequest ServiceRequest[]
}

model ServiceRequest {
  id                     Int                     @id @default(autoincrement())
  type                   RequestType
  dateCreated            DateTime                @default(now())
  dateUpdated            DateTime?
  status                 Status
  description            String
  employeeID             Int?
  assignedTo             Employee?               @relation(fields: [employeeID], references: [id])
  audioVisual            AudioVisual?
  externalTransportation ExternalTransportation?
  equipmentDelivery      EquipmentDelivery?
  language               Language?
  security               Security?
}

model AudioVisual {
  id              Int            @id
  serviceRequest  ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location        String
  deadline        DateTime
  audiovisualType String
}

model ExternalTransportation {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  fromWhere      String
  toWhere        String
  transportType  String
  patientName    String
  priority       Priority
}

model EquipmentDelivery {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  deadline       DateTime
  equipments     String[]
  toWhere        DateTime
  fromWhere      DateTime
}

model Language {
  id              Int            @id
  serviceRequest  ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location        String
  language        String
  startTime       DateTime
  durationInHours Float
}

model Security {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location       String
  riskLevel      Int
}

model Score {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}
