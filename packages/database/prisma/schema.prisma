// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Example table used in the express router example
enum Status {
  NOTASSIGNED
  ASSIGNED
  INPROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum RequestType {
  AUDIOVISUAL
  EXTERNALTRANSPORTATION
  EQUIPMENTDELIVERY
  LANGUAGE
  SECURITY
}

model User {
  username String @id
  password String
  email    String
}

model Employee {
  id             Int              @id @default(autoincrement())
  name           String
  employeeType   String
  canService     RequestType[]
  language       String[]
  ServiceRequest ServiceRequest[]
}

model ServiceRequest {
  id           Int         @id @default(autoincrement())
  type         RequestType
  dateCreated  DateTime    @default(now())
  dateUpdated  DateTime?
  status       Status
  priority     Priority
  location     Location?   @relation(fields: [locationId], references: [id])
  description  String
  employeeID   Int?
  employeeName String?
  assignedTo   Employee?   @relation(fields: [employeeID], references: [id])

  audioVisual            AudioVisual?
  externalTransportation ExternalTransportation?
  equipmentDelivery      EquipmentDelivery?
  language               Language?
  security               Security?
  locationId             Int?
}

model AudioVisual {
  id              Int            @id
  serviceRequest  ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  deadline        DateTime
  audiovisualType String
}

model ExternalTransportation {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  toWhere        Location       @relation(fields: [locationId], references: [id])
  transportType  String
  patientName    String
  pickupTime     DateTime
  locationId     Int
}

model EquipmentDelivery {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  deadline       DateTime
  equipments     String[]
  toWhere        Location       @relation(fields: [locationId], references: [id])
  locationId     Int
}

model Language {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  language       String
  startTime      DateTime
  endTime        DateTime
}

model Security {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  riskLevel      Int
}

model Score {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

model Edge {
  id         Int  @id @default(autoincrement())
  fromNodeId Int
  toNodeId   Int
  fromNode   Node @relation("fromNode", fields: [fromNodeId], references: [id])
  toNode     Node @relation("toNode", fields: [toNodeId], references: [id])
}

model Node {
  id          Int       @id @default(autoincrement())
  description String
  x           Int
  y           Int
  Location    Location?
  fromEdge    Edge[]    @relation("fromNode")
  toEdge      Edge[]    @relation("toNode")
}

model Location {
  id                     Int                      @id @default(autoincrement())
  suite                  String
  floor                  Int
  nodeID                 Int?                     @unique
  node                   Node?                    @relation(fields: [nodeID], references: [id])
  departmentId           Int?
  Department             Department?              @relation(fields: [departmentId], references: [id])
  ServiceRequest         ServiceRequest[]
  ExternalTransportation ExternalTransportation[]
  EquipmentDelivery      EquipmentDelivery[]
}

model Department {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  phoneNumber        String
  Location           Location[]
  DepartmentServices DepartmentServices[]
  buildingID         Int                  @default(1)
  building           Building             @relation(fields: [buildingID], references: [id])
}

model Service {
  id                 Int                  @id @default(autoincrement())
  name               String
  DepartmentServices DepartmentServices[]
}

model DepartmentServices {
  departmentID Int
  serviceID    Int
  department   Department @relation(fields: [departmentID], references: [id])
  service      Service    @relation(fields: [serviceID], references: [id])

  @@id([departmentID, serviceID])
}

model Building {
  id          Int          @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String
  Department  Department[]
}
