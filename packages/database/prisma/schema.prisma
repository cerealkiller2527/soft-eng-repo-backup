// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Example table used in the express router example
enum Status {
  NOTASSIGNED
  ASSIGNED
  INPROGRESS
  COMPLETED
}

enum RequestType {
  AUDIOVISUAL
  EXTERNALTRANSPORTATION
  EQUIPMENTDELIVERY
  LANGUAGE
  SECURITY
}

enum Priority {
  Low
  Medium
  High
  Emergency
}

enum nodeType {
  Entrance
  Intermediary
  Staircase
  Elevator
  Location
}

model User {
  username String @id
  password String
  email    String
}

model Employee {
  id             Int              @id @default(autoincrement())
  name           String
  employeeType   String
  canService     RequestType[]
  language       String[]
  ServiceRequest ServiceRequest[] @relation("assign to")
}

model ServiceRequest {
  id                     Int                     @id @default(autoincrement())
  type                   RequestType
  dateCreated            DateTime                @default(now())
  dateUpdated            DateTime?
  status                 Status
  description            String
  assignedEmployeeID     Int?
  assignedTo             Employee?               @relation("assign to", fields: [assignedEmployeeID], references: [id])
  fromEmployee           String
  priority               Priority
  audioVisual            AudioVisual?
  externalTransportation ExternalTransportation?
  equipmentDelivery      EquipmentDelivery?
  language               Language?
  security               Security?
}

model AudioVisual {
  id              Int            @id
  serviceRequest  ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location        String
  deadline        DateTime
  audiovisualType String
}

model ExternalTransportation {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  fromWhere      String
  toWhere        String
  transportType  String
  patientName    String
  pickupTime     DateTime
}

model EquipmentDelivery {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  deadline       DateTime
  equipments     String[]
  toWhere        String
}

model Language {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location       String
  language       String
  startTime      DateTime
  endTime        DateTime
}

model Security {
  id             Int            @id
  serviceRequest ServiceRequest @relation(fields: [id], references: [id], onDelete: Cascade)
  location       String
}

model Score {
  id    Int      @id @default(autoincrement())
  time  DateTime
  score Int
}

model Edge {
  id         Int  @id @default(autoincrement())
  fromNodeId Int
  toNodeId   Int
  fromNode   Node @relation("fromNode", fields: [fromNodeId], references: [id])
  toNode     Node @relation("toNode", fields: [toNodeId], references: [id])
}

model Node {
  id           Int         @id @default(autoincrement())
  type         nodeType
  description  String
  lat          Float
  long         Float
  suite        String
  floor        Int
  fromEdge     Edge[]      @relation("fromNode")
  toEdge       Edge[]      @relation("toNode")
  buildingId   Int
  building     Building    @relation(fields: [buildingId], references: [id])
  departmentId Int?
  Department   Department? @relation(fields: [departmentId], references: [id])
}

model Department {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  phoneNumber        String
  node               Node[]
  DepartmentServices DepartmentServices[]
  buildingID         Int
}

model Service {
  id                 Int                  @id @default(autoincrement())
  name               String
  DepartmentServices DepartmentServices[]
}

model DepartmentServices {
  departmentID Int
  serviceID    Int
  department   Department @relation(fields: [departmentID], references: [id])
  service      Service    @relation(fields: [serviceID], references: [id])

  @@id([departmentID, serviceID])
}

model Building {
  id          Int    @id @default(autoincrement())
  name        String
  address     String
  phoneNumber String
  Node        Node[]
}
